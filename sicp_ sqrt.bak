#lang simply-scheme
#|
How does one compute square roots? The most common way is to use Newton's method
of successive approximations, which says that whenever we have a guess y for
the value of the square root of a number x, we can perform a simple manipulation
to get a better guess (one closer to the actual square root) by averaging y with x/y.
|#
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improved-guess guess x) x)))
(define (good-enough? guess x)
  (< (- (square guess) x) 0.0001))

(define (improved-guess guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (srt-iter 1 x))
(sqrt 9)
